# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Trigger the workflow every week
  schedule:
    - cron: '0 0 * * 0'
  
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

permissions:
  contents: write

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  modify_and_release_apk:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: mkdir
        run: |
          mkdir -p ./headless-browser/out
          chmod 777 ./headless-browser/out

      - name: run docker
        run: docker compose -f headless-browser/docker-compose.yml up -d --wait
      
      - name: Install npm
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Run the download script
        # run the script, if it fails then upload the screenshot to the artifacts and fail the build
        # if a command fails, the rest of the code wont be executed, thats why we need to capture the error code in the same line
        run: |
          echo "SCRAPE_RESULT=0" >> $GITHUB_ENV
          node selenium-dl.js || echo "SCRAPE_RESULT=$?" >> $GITHUB_ENV

      - name: upload screenshot
        if: ${{ env.SCRAPE_RESULT != 0 }}
        uses: actions/upload-artifact@v4
        with:
          name: screenshot
          path: ./ss.png

      - name: fail if download failed
        if: ${{ env.SCRAPE_RESULT != 0 }}
        run: false

      - name: stop docker
        run: docker compose -f headless-browser/docker-compose.yml down

      - name: install apktool
        run: |
          wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.10.0.jar -O apktool.jar
          wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool -O apktool
          chmod +x apktool

      - name: process apkm files
        id: process_apkm
        run: |
          APKM_NAME=$(ls -q ./headless-browser/out/*.apkm)
          # if apkm file is found, then extract it
          if [ -n "$APKM_NAME" ]; then
            pip3 install -r requirements.txt
            export PATH=$PATH:$(pwd)
            python apkm.py $APKM_NAME
          fi

      # - name: Setup tmate session
      #   uses: mxschmitt/action-tmate@v3

      - name: parse and save file name
        id: file_name
        run: |
          APK_NAME=$(basename -s .apk ./headless-browser/out/md.obsidian_*.apk)
          echo "APK_NAME=$APK_NAME" >> $GITHUB_ENV
          echo "APK_VERSION=$(echo $APK_NAME | awk -F'_' '{print $2}')" >> $GITHUB_ENV
          NEW_APK_NAME=`echo $APK_NAME | awk -F'_' '{print $1 "-" $2}'`
          echo "NEW_APK_NAME=$NEW_APK_NAME" >> $GITHUB_ENV

      - name: check if apk is already released
        run: |
          echo "SHOULD_RELEASE=0" >> $GITHUB_ENV
          gh release view -R ${{ github.repository_owner }}/${{ github.event.repository.name }} ${{ env.APK_VERSION }} || echo "SHOULD_RELEASE=1" >> $GITHUB_ENV
        env:
          GH_TOKEN: ${{ secrets.GH_RELEASE_TOKEN }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          
      - name: rename apk to something simple
        run: mv ./headless-browser/out/md.obsidian_*.apk obsidian.apk

      - name: unpack the apk
        run: |
          ./apktool d obsidian.apk

      - name: download frida gadget
        uses: robinraju/release-downloader@v1.8
        with:
          repository: frida/frida
          latest: true
          fileName: "frida-gadget-*-android-arm64.so.xz"
          out-file-path: "./frida-gadget/"

      - name: extract the archive
        run: |
          unxz ./frida-gadget/*.xz
          mv ./frida-gadget/*.so ./frida-gadget/libgadget.so

      - name: copy gadget to library folder
        run: cp ./frida-gadget/libgadget.so ./obsidian/lib/arm64-v8a/libgadget.so

      - name: Install npm
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd ./frida-agent
          npm ci
          npm run build

      - name: copy agent to library folder
        run: |
          cp ./frida-agent/_agent.js ./obsidian/lib/arm64-v8a/libsslunpin.js.so
          cp ./frida-agent/gadget-config.json ./obsidian/lib/arm64-v8a/libgadget.config.so

      - name: add constructor block
        run: cat ./frida-agent/constructor.smali >> ./obsidian/smali/md/obsidian/MainActivity.smali

      - name: zip the folder
        run: zip -qr obsidian-unpacked-hooked.zip obsidian/

      - name: build the apk
        run: |
          ./apktool b ./obsidian

      - uses: kevin-david/zipalign-sign-android-release@v2.0.1 
        name: Sign app APK
        # ID used to access action output
        id: sign_app
        env:
          BUILD_TOOLS_VERSION: 35.0.0
        with:
          releaseDirectory: ./obsidian/dist/
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.ALIAS }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
          zipAlign: true

      - name: rename files
        run: |
          mv obsidian.apk "${{ env.NEW_APK_NAME }}.apk"
          mv ./obsidian/dist/obsidian.apk "./${{ env.NEW_APK_NAME }}-hooked-unsigned.apk"
          mv "${{ steps.sign_app.outputs.signedReleaseFile }}" "${{ env.NEW_APK_NAME }}-hooked-signed.apk"


      - name: save hashes in env
        run: |
          echo '```' > hashes.txt
          echo "SHA256 hashes:" >> hashes.txt
          sha256sum "${{ env.NEW_APK_NAME }}.apk" >> hashes.txt
          sha256sum "${{ env.NEW_APK_NAME }}-hooked-unsigned.apk" >> hashes.txt
          sha256sum "${{ env.NEW_APK_NAME }}-hooked-signed.apk" >> hashes.txt
          echo '```' >> hashes.txt

      - name: release
        uses: softprops/action-gh-release@v2
        if: ${{ env.SHOULD_RELEASE == 1 }} && startsWith(github.ref, 'refs/tags/v')
        with:
          name: ${{ env.APK_VERSION }}
          tag_name: ${{ env.APK_VERSION }}
          body_path: hashes.txt
          files: |
            ./${{ env.NEW_APK_NAME }}.apk
            ./${{ env.NEW_APK_NAME }}-hooked-unsigned.apk
            ./${{ env.NEW_APK_NAME }}-hooked-signed.apk
